#!/bin/bash

set -o errexit
set -o pipefail

function env {
  echo ">> Copying environment file..."
  if [ -f .env ]; then
    echo ".env already exists, overwriting..."
  else
    echo "Creating .env file from .env.example"
  fi
  cp -f .env.example .env
  chmod 664 .env
  chown 1000:1000 .env
}

function setup {
  rm-all || echo "[warn] Could not complete cleanup (rm-all); continuing..."

  env || echo "[warn] Failed to copy .env (env); continuing..."

  up || echo "[warn] Failed to start containers (up); continuing..."

  composer || echo "[warn] Composer install failed (composer); continuing..."

  gen_key || echo "[warn] Key generation failed (gen_key); continuing..."

  migrate || echo "[warn] Migrations failed (migrate); continuing..."

  seed || echo "[warn] Seeding failed (seed); continuing..."
}

function seed {
  source .env
  echo ">> Seeding database..."
  docker compose exec app php artisan db:seed --force
}

function phpstan {
  TEST_PATH="${@:-}"
  docker compose run --rm app ./vendor/bin/phpstan analyse --memory-limit 1G ${TEST_PATH}
}

function phpcs {
  if [ $# -eq 0 ]; then
    docker compose run --rm app ./vendor/bin/phpcs app routes tests
  else
    docker compose run --rm app ./vendor/bin/phpcs "$@"
  fi
}

function phpcbf {
  if [ $# -eq 0 ]; then
    docker compose run --rm app ./vendor/bin/phpcbf app routes tests
  else
    docker compose run --rm app ./vendor/bin/phpcbf "$@"
  fi
}

function test {
  docker compose exec app php artisan test
}

function all-tests {
  set -e
  ./run test
  ./run phpcs
  ./run phpstan
}

function ps {
  docker compose ps
}

function up {
  source .env
  echo ">> Starting containers..."
  docker compose up "${@}" -d
}

function down {
  source .env
  docker compose down "${@}"
}

function gen_key {
  source .env
  echo ">> Generating application key..."
  docker compose exec app php artisan key:generate
}

function migrate {
  source .env
  echo ">> Running database migrations..."
  docker compose exec app php artisan migrate
}

function storage_link {
  source .env
  echo ">> Creating storage symbolic link..."
  docker compose exec app php artisan storage:link
}

function composer {
  source .env
  echo ">> Installing Composer dependencies..."
  docker compose exec app composer install --no-interaction --optimize-autoloader
}

function rm-all {
  echo ">> Cleaning up .env, vendor, containers, images, and volumes..."

  rm -rf pgdata 2>/dev/null || echo "pgdata directory not found, skipping removal"
  rm -rf vendor 2>/dev/null || echo "vendor directory not found, skipping removal"
  rm -f .env 2>/dev/null || echo ".env not found, skipping removal"
  rm -rf storage/app/public/products 2>/dev/null || echo "storage/app/public/products directory not found, skipping removal"

  docker ps -a --filter "name=marketcore-api" -q | xargs -r docker rm -f

  docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep "marketcore-api" | awk '{print $2}' | xargs -r docker rmi -f

  docker volume ls --format "{{.Name}}" | grep "marketcore-api" | xargs -r docker volume rm -f

  echo ">> Cleanup completed!"
}

function exec {
  source .env
  if [ $# -eq 0 ]; then
    echo ">> Missing command to run inside app container"
    exit 1
  fi

  echo ">> Executing in app container: $*"
  sudo docker exec -it marketcore-api-app-1 "$@"
}

function help {
  echo "Usage: run [command]"
  echo "Available commands:"
  echo ""
  echo "Environment & Setup:"
  echo "  env          - Copy environment file (.env.example to .env)"
  echo "  setup        - Complete environment setup (env, up, composer, gen_key, migrate, seed)"
  echo "  up           - Start Docker containers"
  echo "  down         - Stop Docker containers"
  echo "  ps           - Show container status"
  echo "  rm-all       - Clean up environment (remove .env, vendor, containers, images, volumes)"
  echo ""
  echo "Laravel Commands:"
  echo "  gen_key      - Generate Laravel application key"
  echo "  migrate      - Run database migrations"
  echo "  seed         - Seed database with initial data"
  echo "  storage_link - Create storage symbolic link"
  echo "  composer     - Install Composer dependencies"
  echo ""
  echo "Testing & Code Quality:"
  echo "  test         - Run PHPUnit tests"
  echo "  phpstan      - Run PHPStan static analysis (Level 8)"
  echo "  phpcs        - Run PHP Code Sniffer (PSR-12 standards)"
  echo "  phpcbf       - Run PHP Code Beautifier and Fixer"
  echo "  all-tests    - Run all tests and code quality checks (test + phpcs + phpstan)"
  echo ""
  echo "Utilities:"
  echo "  exec <cmd>   - Execute command inside app container"
  echo "  help         - Show this help message"
  echo ""
  echo "Examples:"
  echo "  ./run setup                    # Complete project setup"
  echo "  ./run test                     # Run tests"
  echo "  ./run phpstan app/Models       # Analyze specific directory"
  echo "  ./run exec php artisan tinker  # Open Laravel tinker"
}

TIMEFORMAT=$'\nTask completed in %3lR'
time ${@}
